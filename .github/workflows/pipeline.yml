name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  # Job de CI - sempre executa automaticamente
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Setup Environment
        run: |
          cp .env.example .env
          echo "CI=true" >> .env

      - name: Sync db
        run: npm run db:generate

      - name: Build
        run: npm run build --if-present

  # Job de Deploy - aguarda aprova√ß√£o manual ap√≥s CI
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: ci
    environment:
      name: production-deploy
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    outputs:
      release-tag: ${{ steps.create-tag.outputs.tag }}
      image-digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Generate semantic version tag
        id: create-tag
        run: ./.github/scripts/create-semantic-tag.sh

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.create-tag.outputs.tag }}
            type=semver,pattern={{version}},value=${{ steps.create-tag.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.create-tag.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.create-tag.outputs.version }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}"
            "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"
            "DATABASE_URL=${{ secrets.DATABASE_URL }}"
            "SITE_URL=${{ secrets.SITE_URL }}"
            "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"
            "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_PUBLISH_KEY=${{ secrets.STRIPE_PUBLISH_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            FREE_PLAN_PRICE_ID=${{ secrets.FREE_PLAN_PRICE_ID }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            GA_ID=${{ secrets.GA_ID }}
            LOKI_URL=${{ secrets.LOKI_URL }}
            NEXT_PUBLIC_GOOGLE_ADSENSE_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Deploy notification
        run: |
          echo "üöÄ Starting production deployment..."
          echo "üè∑Ô∏è Release Tag: ${{ steps.create-tag.outputs.tag }}"
          echo "üì¶ Docker Image: ${{ steps.meta.outputs.tags }}"
          echo "üîç Digest: ${{ steps.push.outputs.digest }}"

  # Job de Deploy VPS - executa ap√≥s build da imagem
  deploy-vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "infra"
          target: "~/pontim"

      - name: Ensure essential containers are running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ~/pontim/infra

            REQUIRED_CONTAINERS=("redis" "prometheus" "grafana" "loki" "node-exporter" "nginx")

            for SERVICE in "${REQUIRED_CONTAINERS[@]}"; do
              CONTAINER_NAME="pontim-$SERVICE"
              if ! docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
                echo "üîÅ $CONTAINER_NAME is not running. Starting..."
                docker compose up -d $SERVICE
              else
                echo "‚úÖ $CONTAINER_NAME is already running."
              fi
            done
            echo "‚úÖ All required containers are running."

      - name: Deploy Pontim App to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ~/pontim/infra

            echo "üöÄ Starting production deployment..."
            echo "üè∑Ô∏è Deploying version: ${{ needs.build-image.outputs.release-tag }}"
            echo "üîê Logging into GitHub Container Registry..."

            # Login no registry privado
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "üì¶ Pulling specific pontim image version..."

            # Define a vers√£o espec√≠fica a ser deployada
            export PONTIM_VERSION=${{ needs.build-image.outputs.release-tag }}
            echo "üéØ Using PONTIM_VERSION=$PONTIM_VERSION"

            # Pull da imagem com a vers√£o espec√≠fica
            docker compose pull pontim

            echo "üîÑ Updating pontim-app container with version $PONTIM_VERSION..."

            # Para o container atual e inicia o novo com a vers√£o espec√≠fica
            docker compose up -d --no-deps pontim

            echo "‚úÖ Production deployment completed!"
            echo "üè∑Ô∏è Deployed version: ${{ needs.build-image.outputs.release-tag }}"
            echo "üìä Container status:"
            docker ps --filter "name=pontim-app" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Verifica se o container est√° saud√°vel
            echo "üîç Checking container health..."
            sleep 10
            if docker ps --filter "name=pontim-app" --filter "status=running" | grep -q "pontim-app"; then
              echo "‚úÖ Pontim is running successfully!"
              echo "üê≥ Container is using image: $(docker inspect pontim-app --format='{{.Config.Image}}')"
            else
              echo "‚ùå Pontim failed to start properly"
              docker logs pontim-app --tail 20
              exit 1
            fi
